$primary-color: #444;
$secondary-color: #eece1a;
$show-home-image: true;
$home-image: url(../img/background.jpg);
$background-opacity: 0.9;

@mixin easeOut {
  transition: all 0.5s ease-out;
}

@mixin background {
  @if $show-home-image {
    &#bg-img {
      background: $home-image;
      background-position: fixed;
      background-size: cover;

      &:after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        background: rgba($primary-color, $background-opacity);
      }
    }
  }
}

//Set Text Colour
@function set-text-color($color) {
  @if (lightness($color) > 40) {
    @return #000;
  } @else {
    @return #fff;
  }
}

//Media query Mixins

@mixin mediaSm {
  @media screen and (max-width: 500px) {
    @content;
  }
}

@mixin mediaMd {
  @media screen and (max-width: 768px) {
    @content;
  }
}

@mixin mediaLg {
  @media screen and (min-width: 769px) and (max-width: 1170px) {
    @content;
  }
}

@mixin mediaXl {
  @media screen and (min-width: 1171px) {
    @content;
  }
}

//Mobile first mixins

@mixin atSmall {
  @media (min-width: 530px) {
    /*Once a scree reaches 530px do this:*/
    @content;
  }
}

@mixin atMedium {
  @media (min-width: 800px) {
    @content;
  }
}

@mixin atLarge {
  @media (min-width: 1010px) {
    @content;
  }
}

/*These rules create mixins call atSmall etc and can be used as short hand for media queries*/
/*If the content is larger than the minimum width, the min-width property has no effect.*/

@mixin clearfix {
  &::after {
    content: "";
    clear: both;
    display: table;
  }
}
